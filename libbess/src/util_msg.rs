// This file is generated by rust-protobuf 2.16.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `util_msg.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_16_2;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Field {
    // message fields
    pub num_bytes: u32,
    // message oneof groups
    pub position: ::std::option::Option<Field_oneof_position>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Field {
    fn default() -> &'a Field {
        <Field as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum Field_oneof_position {
    attr_name(::std::string::String),
    offset(u32),
}

impl Field {
    pub fn new() -> Field {
        ::std::default::Default::default()
    }

    // string attr_name = 1;


    pub fn get_attr_name(&self) -> &str {
        match self.position {
            ::std::option::Option::Some(Field_oneof_position::attr_name(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_attr_name(&mut self) {
        self.position = ::std::option::Option::None;
    }

    pub fn has_attr_name(&self) -> bool {
        match self.position {
            ::std::option::Option::Some(Field_oneof_position::attr_name(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_attr_name(&mut self, v: ::std::string::String) {
        self.position = ::std::option::Option::Some(Field_oneof_position::attr_name(v))
    }

    // Mutable pointer to the field.
    pub fn mut_attr_name(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(Field_oneof_position::attr_name(_)) = self.position {
        } else {
            self.position = ::std::option::Option::Some(Field_oneof_position::attr_name(::std::string::String::new()));
        }
        match self.position {
            ::std::option::Option::Some(Field_oneof_position::attr_name(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_attr_name(&mut self) -> ::std::string::String {
        if self.has_attr_name() {
            match self.position.take() {
                ::std::option::Option::Some(Field_oneof_position::attr_name(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // uint32 offset = 2;


    pub fn get_offset(&self) -> u32 {
        match self.position {
            ::std::option::Option::Some(Field_oneof_position::offset(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_offset(&mut self) {
        self.position = ::std::option::Option::None;
    }

    pub fn has_offset(&self) -> bool {
        match self.position {
            ::std::option::Option::Some(Field_oneof_position::offset(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: u32) {
        self.position = ::std::option::Option::Some(Field_oneof_position::offset(v))
    }

    // uint32 num_bytes = 3;


    pub fn get_num_bytes(&self) -> u32 {
        self.num_bytes
    }
    pub fn clear_num_bytes(&mut self) {
        self.num_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_num_bytes(&mut self, v: u32) {
        self.num_bytes = v;
    }
}

impl ::protobuf::Message for Field {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.position = ::std::option::Option::Some(Field_oneof_position::attr_name(is.read_string()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.position = ::std::option::Option::Some(Field_oneof_position::offset(is.read_uint32()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.num_bytes = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.num_bytes != 0 {
            my_size += ::protobuf::rt::value_size(3, self.num_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.position {
            match v {
                &Field_oneof_position::attr_name(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
                &Field_oneof_position::offset(v) => {
                    my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.num_bytes != 0 {
            os.write_uint32(3, self.num_bytes)?;
        }
        if let ::std::option::Option::Some(ref v) = self.position {
            match v {
                &Field_oneof_position::attr_name(ref v) => {
                    os.write_string(1, v)?;
                },
                &Field_oneof_position::offset(v) => {
                    os.write_uint32(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Field {
        Field::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "attr_name",
                Field::has_attr_name,
                Field::get_attr_name,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor::<_>(
                "offset",
                Field::has_offset,
                Field::get_offset,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "num_bytes",
                |m: &Field| { &m.num_bytes },
                |m: &mut Field| { &mut m.num_bytes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Field>(
                "Field",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Field {
        static instance: ::protobuf::rt::LazyV2<Field> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Field::new)
    }
}

impl ::protobuf::Clear for Field {
    fn clear(&mut self) {
        self.position = ::std::option::Option::None;
        self.position = ::std::option::Option::None;
        self.num_bytes = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Field {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Field {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct FieldData {
    // message oneof groups
    pub encoding: ::std::option::Option<FieldData_oneof_encoding>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FieldData {
    fn default() -> &'a FieldData {
        <FieldData as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum FieldData_oneof_encoding {
    value_bin(::std::vec::Vec<u8>),
    value_int(u64),
}

impl FieldData {
    pub fn new() -> FieldData {
        ::std::default::Default::default()
    }

    // bytes value_bin = 1;


    pub fn get_value_bin(&self) -> &[u8] {
        match self.encoding {
            ::std::option::Option::Some(FieldData_oneof_encoding::value_bin(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_value_bin(&mut self) {
        self.encoding = ::std::option::Option::None;
    }

    pub fn has_value_bin(&self) -> bool {
        match self.encoding {
            ::std::option::Option::Some(FieldData_oneof_encoding::value_bin(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_value_bin(&mut self, v: ::std::vec::Vec<u8>) {
        self.encoding = ::std::option::Option::Some(FieldData_oneof_encoding::value_bin(v))
    }

    // Mutable pointer to the field.
    pub fn mut_value_bin(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(FieldData_oneof_encoding::value_bin(_)) = self.encoding {
        } else {
            self.encoding = ::std::option::Option::Some(FieldData_oneof_encoding::value_bin(::std::vec::Vec::new()));
        }
        match self.encoding {
            ::std::option::Option::Some(FieldData_oneof_encoding::value_bin(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_value_bin(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_value_bin() {
            match self.encoding.take() {
                ::std::option::Option::Some(FieldData_oneof_encoding::value_bin(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // uint64 value_int = 2;


    pub fn get_value_int(&self) -> u64 {
        match self.encoding {
            ::std::option::Option::Some(FieldData_oneof_encoding::value_int(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_value_int(&mut self) {
        self.encoding = ::std::option::Option::None;
    }

    pub fn has_value_int(&self) -> bool {
        match self.encoding {
            ::std::option::Option::Some(FieldData_oneof_encoding::value_int(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_value_int(&mut self, v: u64) {
        self.encoding = ::std::option::Option::Some(FieldData_oneof_encoding::value_int(v))
    }
}

impl ::protobuf::Message for FieldData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.encoding = ::std::option::Option::Some(FieldData_oneof_encoding::value_bin(is.read_bytes()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.encoding = ::std::option::Option::Some(FieldData_oneof_encoding::value_int(is.read_uint64()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.encoding {
            match v {
                &FieldData_oneof_encoding::value_bin(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(1, &v);
                },
                &FieldData_oneof_encoding::value_int(v) => {
                    my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.encoding {
            match v {
                &FieldData_oneof_encoding::value_bin(ref v) => {
                    os.write_bytes(1, v)?;
                },
                &FieldData_oneof_encoding::value_int(v) => {
                    os.write_uint64(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FieldData {
        FieldData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                "value_bin",
                FieldData::has_value_bin,
                FieldData::get_value_bin,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_u64_accessor::<_>(
                "value_int",
                FieldData::has_value_int,
                FieldData::get_value_int,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FieldData>(
                "FieldData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FieldData {
        static instance: ::protobuf::rt::LazyV2<FieldData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FieldData::new)
    }
}

impl ::protobuf::Clear for FieldData {
    fn clear(&mut self) {
        self.encoding = ::std::option::Option::None;
        self.encoding = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FieldData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FieldData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eutil_msg.proto\x12\x07bess.pb\"i\n\x05Field\x12\x1d\n\tattr_name\
    \x18\x01\x20\x01(\tH\0R\x08attrName\x12\x18\n\x06offset\x18\x02\x20\x01(\
    \rH\0R\x06offset\x12\x1b\n\tnum_bytes\x18\x03\x20\x01(\rR\x08numBytesB\n\
    \n\x08position\"U\n\tFieldData\x12\x1d\n\tvalue_bin\x18\x01\x20\x01(\x0c\
    H\0R\x08valueBin\x12\x1d\n\tvalue_int\x18\x02\x20\x01(\x04H\0R\x08valueI\
    ntB\n\n\x08encodingb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
