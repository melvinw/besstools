// This file is generated by rust-protobuf 2.16.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `ports/port_msg.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_16_2;

#[derive(PartialEq, Clone, Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct PCAPPortArg {
    // message fields
    pub dev: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PCAPPortArg {
    fn default() -> &'a PCAPPortArg {
        <PCAPPortArg as ::protobuf::Message>::default_instance()
    }
}

impl PCAPPortArg {
    pub fn new() -> PCAPPortArg {
        ::std::default::Default::default()
    }

    // string dev = 1;

    pub fn get_dev(&self) -> &str {
        &self.dev
    }
    pub fn clear_dev(&mut self) {
        self.dev.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev(&mut self, v: ::std::string::String) {
        self.dev = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev(&mut self) -> &mut ::std::string::String {
        &mut self.dev
    }

    // Take field
    pub fn take_dev(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dev, ::std::string::String::new())
    }
}

impl ::protobuf::Message for PCAPPortArg {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dev)?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dev.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.dev);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if !self.dev.is_empty() {
            os.write_string(1, &self.dev)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PCAPPortArg {
        PCAPPortArg::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "dev",
                |m: &PCAPPortArg| &m.dev,
                |m: &mut PCAPPortArg| &mut m.dev,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PCAPPortArg>(
                "PCAPPortArg",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static PCAPPortArg {
        static instance: ::protobuf::rt::LazyV2<PCAPPortArg> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PCAPPortArg::new)
    }
}

impl ::protobuf::Clear for PCAPPortArg {
    fn clear(&mut self) {
        self.dev.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PCAPPortArg {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PCAPPortArg {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct PMDPortArg {
    // message fields
    pub loopback: bool,
    pub vlan_offload_rx_strip: bool,
    pub vlan_offload_rx_filter: bool,
    pub vlan_offload_rx_qinq: bool,
    // message oneof groups
    pub port: ::std::option::Option<PMDPortArg_oneof_port>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PMDPortArg {
    fn default() -> &'a PMDPortArg {
        <PMDPortArg as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone, PartialEq, Debug)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum PMDPortArg_oneof_port {
    port_id(u64),
    pci(::std::string::String),
    vdev(::std::string::String),
}

impl PMDPortArg {
    pub fn new() -> PMDPortArg {
        ::std::default::Default::default()
    }

    // bool loopback = 1;

    pub fn get_loopback(&self) -> bool {
        self.loopback
    }
    pub fn clear_loopback(&mut self) {
        self.loopback = false;
    }

    // Param is passed by value, moved
    pub fn set_loopback(&mut self, v: bool) {
        self.loopback = v;
    }

    // uint64 port_id = 2;

    pub fn get_port_id(&self) -> u64 {
        match self.port {
            ::std::option::Option::Some(PMDPortArg_oneof_port::port_id(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_port_id(&mut self) {
        self.port = ::std::option::Option::None;
    }

    pub fn has_port_id(&self) -> bool {
        match self.port {
            ::std::option::Option::Some(PMDPortArg_oneof_port::port_id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_port_id(&mut self, v: u64) {
        self.port = ::std::option::Option::Some(PMDPortArg_oneof_port::port_id(v))
    }

    // string pci = 3;

    pub fn get_pci(&self) -> &str {
        match self.port {
            ::std::option::Option::Some(PMDPortArg_oneof_port::pci(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_pci(&mut self) {
        self.port = ::std::option::Option::None;
    }

    pub fn has_pci(&self) -> bool {
        match self.port {
            ::std::option::Option::Some(PMDPortArg_oneof_port::pci(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_pci(&mut self, v: ::std::string::String) {
        self.port = ::std::option::Option::Some(PMDPortArg_oneof_port::pci(v))
    }

    // Mutable pointer to the field.
    pub fn mut_pci(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(PMDPortArg_oneof_port::pci(_)) = self.port {
        } else {
            self.port = ::std::option::Option::Some(PMDPortArg_oneof_port::pci(
                ::std::string::String::new(),
            ));
        }
        match self.port {
            ::std::option::Option::Some(PMDPortArg_oneof_port::pci(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_pci(&mut self) -> ::std::string::String {
        if self.has_pci() {
            match self.port.take() {
                ::std::option::Option::Some(PMDPortArg_oneof_port::pci(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string vdev = 4;

    pub fn get_vdev(&self) -> &str {
        match self.port {
            ::std::option::Option::Some(PMDPortArg_oneof_port::vdev(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_vdev(&mut self) {
        self.port = ::std::option::Option::None;
    }

    pub fn has_vdev(&self) -> bool {
        match self.port {
            ::std::option::Option::Some(PMDPortArg_oneof_port::vdev(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_vdev(&mut self, v: ::std::string::String) {
        self.port = ::std::option::Option::Some(PMDPortArg_oneof_port::vdev(v))
    }

    // Mutable pointer to the field.
    pub fn mut_vdev(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(PMDPortArg_oneof_port::vdev(_)) = self.port {
        } else {
            self.port = ::std::option::Option::Some(PMDPortArg_oneof_port::vdev(
                ::std::string::String::new(),
            ));
        }
        match self.port {
            ::std::option::Option::Some(PMDPortArg_oneof_port::vdev(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_vdev(&mut self) -> ::std::string::String {
        if self.has_vdev() {
            match self.port.take() {
                ::std::option::Option::Some(PMDPortArg_oneof_port::vdev(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // bool vlan_offload_rx_strip = 5;

    pub fn get_vlan_offload_rx_strip(&self) -> bool {
        self.vlan_offload_rx_strip
    }
    pub fn clear_vlan_offload_rx_strip(&mut self) {
        self.vlan_offload_rx_strip = false;
    }

    // Param is passed by value, moved
    pub fn set_vlan_offload_rx_strip(&mut self, v: bool) {
        self.vlan_offload_rx_strip = v;
    }

    // bool vlan_offload_rx_filter = 6;

    pub fn get_vlan_offload_rx_filter(&self) -> bool {
        self.vlan_offload_rx_filter
    }
    pub fn clear_vlan_offload_rx_filter(&mut self) {
        self.vlan_offload_rx_filter = false;
    }

    // Param is passed by value, moved
    pub fn set_vlan_offload_rx_filter(&mut self, v: bool) {
        self.vlan_offload_rx_filter = v;
    }

    // bool vlan_offload_rx_qinq = 7;

    pub fn get_vlan_offload_rx_qinq(&self) -> bool {
        self.vlan_offload_rx_qinq
    }
    pub fn clear_vlan_offload_rx_qinq(&mut self) {
        self.vlan_offload_rx_qinq = false;
    }

    // Param is passed by value, moved
    pub fn set_vlan_offload_rx_qinq(&mut self, v: bool) {
        self.vlan_offload_rx_qinq = v;
    }
}

impl ::protobuf::Message for PMDPortArg {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_bool()?;
                    self.loopback = tmp;
                }
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    self.port = ::std::option::Option::Some(PMDPortArg_oneof_port::port_id(
                        is.read_uint64()?,
                    ));
                }
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    self.port =
                        ::std::option::Option::Some(PMDPortArg_oneof_port::pci(is.read_string()?));
                }
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    self.port =
                        ::std::option::Option::Some(PMDPortArg_oneof_port::vdev(is.read_string()?));
                }
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_bool()?;
                    self.vlan_offload_rx_strip = tmp;
                }
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_bool()?;
                    self.vlan_offload_rx_filter = tmp;
                }
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_bool()?;
                    self.vlan_offload_rx_qinq = tmp;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.loopback != false {
            my_size += 2;
        }
        if self.vlan_offload_rx_strip != false {
            my_size += 2;
        }
        if self.vlan_offload_rx_filter != false {
            my_size += 2;
        }
        if self.vlan_offload_rx_qinq != false {
            my_size += 2;
        }
        if let ::std::option::Option::Some(ref v) = self.port {
            match v {
                &PMDPortArg_oneof_port::port_id(v) => {
                    my_size +=
                        ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
                }
                &PMDPortArg_oneof_port::pci(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                }
                &PMDPortArg_oneof_port::vdev(ref v) => {
                    my_size += ::protobuf::rt::string_size(4, &v);
                }
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if self.loopback != false {
            os.write_bool(1, self.loopback)?;
        }
        if self.vlan_offload_rx_strip != false {
            os.write_bool(5, self.vlan_offload_rx_strip)?;
        }
        if self.vlan_offload_rx_filter != false {
            os.write_bool(6, self.vlan_offload_rx_filter)?;
        }
        if self.vlan_offload_rx_qinq != false {
            os.write_bool(7, self.vlan_offload_rx_qinq)?;
        }
        if let ::std::option::Option::Some(ref v) = self.port {
            match v {
                &PMDPortArg_oneof_port::port_id(v) => {
                    os.write_uint64(2, v)?;
                }
                &PMDPortArg_oneof_port::pci(ref v) => {
                    os.write_string(3, v)?;
                }
                &PMDPortArg_oneof_port::vdev(ref v) => {
                    os.write_string(4, v)?;
                }
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PMDPortArg {
        PMDPortArg::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeBool,
            >(
                "loopback",
                |m: &PMDPortArg| &m.loopback,
                |m: &mut PMDPortArg| &mut m.loopback,
            ));
            fields.push(
                ::protobuf::reflect::accessor::make_singular_u64_accessor::<_>(
                    "port_id",
                    PMDPortArg::has_port_id,
                    PMDPortArg::get_port_id,
                ),
            );
            fields.push(
                ::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                    "pci",
                    PMDPortArg::has_pci,
                    PMDPortArg::get_pci,
                ),
            );
            fields.push(
                ::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                    "vdev",
                    PMDPortArg::has_vdev,
                    PMDPortArg::get_vdev,
                ),
            );
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeBool,
            >(
                "vlan_offload_rx_strip",
                |m: &PMDPortArg| &m.vlan_offload_rx_strip,
                |m: &mut PMDPortArg| &mut m.vlan_offload_rx_strip,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeBool,
            >(
                "vlan_offload_rx_filter",
                |m: &PMDPortArg| &m.vlan_offload_rx_filter,
                |m: &mut PMDPortArg| &mut m.vlan_offload_rx_filter,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeBool,
            >(
                "vlan_offload_rx_qinq",
                |m: &PMDPortArg| &m.vlan_offload_rx_qinq,
                |m: &mut PMDPortArg| &mut m.vlan_offload_rx_qinq,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PMDPortArg>(
                "PMDPortArg",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static PMDPortArg {
        static instance: ::protobuf::rt::LazyV2<PMDPortArg> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PMDPortArg::new)
    }
}

impl ::protobuf::Clear for PMDPortArg {
    fn clear(&mut self) {
        self.loopback = false;
        self.port = ::std::option::Option::None;
        self.port = ::std::option::Option::None;
        self.port = ::std::option::Option::None;
        self.vlan_offload_rx_strip = false;
        self.vlan_offload_rx_filter = false;
        self.vlan_offload_rx_qinq = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PMDPortArg {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PMDPortArg {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct UnixSocketPortArg {
    // message fields
    pub path: ::std::string::String,
    pub min_rx_interval_ns: i64,
    pub confirm_connect: bool,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UnixSocketPortArg {
    fn default() -> &'a UnixSocketPortArg {
        <UnixSocketPortArg as ::protobuf::Message>::default_instance()
    }
}

impl UnixSocketPortArg {
    pub fn new() -> UnixSocketPortArg {
        ::std::default::Default::default()
    }

    // string path = 1;

    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }

    // int64 min_rx_interval_ns = 2;

    pub fn get_min_rx_interval_ns(&self) -> i64 {
        self.min_rx_interval_ns
    }
    pub fn clear_min_rx_interval_ns(&mut self) {
        self.min_rx_interval_ns = 0;
    }

    // Param is passed by value, moved
    pub fn set_min_rx_interval_ns(&mut self, v: i64) {
        self.min_rx_interval_ns = v;
    }

    // bool confirm_connect = 3;

    pub fn get_confirm_connect(&self) -> bool {
        self.confirm_connect
    }
    pub fn clear_confirm_connect(&mut self) {
        self.confirm_connect = false;
    }

    // Param is passed by value, moved
    pub fn set_confirm_connect(&mut self, v: bool) {
        self.confirm_connect = v;
    }
}

impl ::protobuf::Message for UnixSocketPortArg {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.path,
                    )?;
                }
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.min_rx_interval_ns = tmp;
                }
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_bool()?;
                    self.confirm_connect = tmp;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.path);
        }
        if self.min_rx_interval_ns != 0 {
            my_size += ::protobuf::rt::value_size(
                2,
                self.min_rx_interval_ns,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.confirm_connect != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_string(1, &self.path)?;
        }
        if self.min_rx_interval_ns != 0 {
            os.write_int64(2, self.min_rx_interval_ns)?;
        }
        if self.confirm_connect != false {
            os.write_bool(3, self.confirm_connect)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UnixSocketPortArg {
        UnixSocketPortArg::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "path",
                |m: &UnixSocketPortArg| &m.path,
                |m: &mut UnixSocketPortArg| &mut m.path,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeInt64,
            >(
                "min_rx_interval_ns",
                |m: &UnixSocketPortArg| &m.min_rx_interval_ns,
                |m: &mut UnixSocketPortArg| &mut m.min_rx_interval_ns,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeBool,
            >(
                "confirm_connect",
                |m: &UnixSocketPortArg| &m.confirm_connect,
                |m: &mut UnixSocketPortArg| &mut m.confirm_connect,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UnixSocketPortArg>(
                "UnixSocketPortArg",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static UnixSocketPortArg {
        static instance: ::protobuf::rt::LazyV2<UnixSocketPortArg> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UnixSocketPortArg::new)
    }
}

impl ::protobuf::Clear for UnixSocketPortArg {
    fn clear(&mut self) {
        self.path.clear();
        self.min_rx_interval_ns = 0;
        self.confirm_connect = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UnixSocketPortArg {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnixSocketPortArg {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct VPortArg {
    // message fields
    pub ifname: ::std::string::String,
    pub rxq_cpus: ::std::vec::Vec<i64>,
    pub tx_tci: u64,
    pub tx_outer_tci: u64,
    pub loopback: bool,
    pub ip_addrs: ::protobuf::RepeatedField<::std::string::String>,
    // message oneof groups
    pub cpid: ::std::option::Option<VPortArg_oneof_cpid>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VPortArg {
    fn default() -> &'a VPortArg {
        <VPortArg as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone, PartialEq, Debug)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum VPortArg_oneof_cpid {
    docker(::std::string::String),
    container_pid(i64),
    netns(::std::string::String),
}

impl VPortArg {
    pub fn new() -> VPortArg {
        ::std::default::Default::default()
    }

    // string ifname = 1;

    pub fn get_ifname(&self) -> &str {
        &self.ifname
    }
    pub fn clear_ifname(&mut self) {
        self.ifname.clear();
    }

    // Param is passed by value, moved
    pub fn set_ifname(&mut self, v: ::std::string::String) {
        self.ifname = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ifname(&mut self) -> &mut ::std::string::String {
        &mut self.ifname
    }

    // Take field
    pub fn take_ifname(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ifname, ::std::string::String::new())
    }

    // string docker = 2;

    pub fn get_docker(&self) -> &str {
        match self.cpid {
            ::std::option::Option::Some(VPortArg_oneof_cpid::docker(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_docker(&mut self) {
        self.cpid = ::std::option::Option::None;
    }

    pub fn has_docker(&self) -> bool {
        match self.cpid {
            ::std::option::Option::Some(VPortArg_oneof_cpid::docker(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_docker(&mut self, v: ::std::string::String) {
        self.cpid = ::std::option::Option::Some(VPortArg_oneof_cpid::docker(v))
    }

    // Mutable pointer to the field.
    pub fn mut_docker(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(VPortArg_oneof_cpid::docker(_)) = self.cpid {
        } else {
            self.cpid = ::std::option::Option::Some(VPortArg_oneof_cpid::docker(
                ::std::string::String::new(),
            ));
        }
        match self.cpid {
            ::std::option::Option::Some(VPortArg_oneof_cpid::docker(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_docker(&mut self) -> ::std::string::String {
        if self.has_docker() {
            match self.cpid.take() {
                ::std::option::Option::Some(VPortArg_oneof_cpid::docker(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // int64 container_pid = 3;

    pub fn get_container_pid(&self) -> i64 {
        match self.cpid {
            ::std::option::Option::Some(VPortArg_oneof_cpid::container_pid(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_container_pid(&mut self) {
        self.cpid = ::std::option::Option::None;
    }

    pub fn has_container_pid(&self) -> bool {
        match self.cpid {
            ::std::option::Option::Some(VPortArg_oneof_cpid::container_pid(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_container_pid(&mut self, v: i64) {
        self.cpid = ::std::option::Option::Some(VPortArg_oneof_cpid::container_pid(v))
    }

    // string netns = 4;

    pub fn get_netns(&self) -> &str {
        match self.cpid {
            ::std::option::Option::Some(VPortArg_oneof_cpid::netns(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_netns(&mut self) {
        self.cpid = ::std::option::Option::None;
    }

    pub fn has_netns(&self) -> bool {
        match self.cpid {
            ::std::option::Option::Some(VPortArg_oneof_cpid::netns(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_netns(&mut self, v: ::std::string::String) {
        self.cpid = ::std::option::Option::Some(VPortArg_oneof_cpid::netns(v))
    }

    // Mutable pointer to the field.
    pub fn mut_netns(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(VPortArg_oneof_cpid::netns(_)) = self.cpid {
        } else {
            self.cpid = ::std::option::Option::Some(VPortArg_oneof_cpid::netns(
                ::std::string::String::new(),
            ));
        }
        match self.cpid {
            ::std::option::Option::Some(VPortArg_oneof_cpid::netns(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_netns(&mut self) -> ::std::string::String {
        if self.has_netns() {
            match self.cpid.take() {
                ::std::option::Option::Some(VPortArg_oneof_cpid::netns(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // repeated int64 rxq_cpus = 5;

    pub fn get_rxq_cpus(&self) -> &[i64] {
        &self.rxq_cpus
    }
    pub fn clear_rxq_cpus(&mut self) {
        self.rxq_cpus.clear();
    }

    // Param is passed by value, moved
    pub fn set_rxq_cpus(&mut self, v: ::std::vec::Vec<i64>) {
        self.rxq_cpus = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rxq_cpus(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.rxq_cpus
    }

    // Take field
    pub fn take_rxq_cpus(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.rxq_cpus, ::std::vec::Vec::new())
    }

    // uint64 tx_tci = 6;

    pub fn get_tx_tci(&self) -> u64 {
        self.tx_tci
    }
    pub fn clear_tx_tci(&mut self) {
        self.tx_tci = 0;
    }

    // Param is passed by value, moved
    pub fn set_tx_tci(&mut self, v: u64) {
        self.tx_tci = v;
    }

    // uint64 tx_outer_tci = 7;

    pub fn get_tx_outer_tci(&self) -> u64 {
        self.tx_outer_tci
    }
    pub fn clear_tx_outer_tci(&mut self) {
        self.tx_outer_tci = 0;
    }

    // Param is passed by value, moved
    pub fn set_tx_outer_tci(&mut self, v: u64) {
        self.tx_outer_tci = v;
    }

    // bool loopback = 8;

    pub fn get_loopback(&self) -> bool {
        self.loopback
    }
    pub fn clear_loopback(&mut self) {
        self.loopback = false;
    }

    // Param is passed by value, moved
    pub fn set_loopback(&mut self, v: bool) {
        self.loopback = v;
    }

    // repeated string ip_addrs = 9;

    pub fn get_ip_addrs(&self) -> &[::std::string::String] {
        &self.ip_addrs
    }
    pub fn clear_ip_addrs(&mut self) {
        self.ip_addrs.clear();
    }

    // Param is passed by value, moved
    pub fn set_ip_addrs(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.ip_addrs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ip_addrs(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.ip_addrs
    }

    // Take field
    pub fn take_ip_addrs(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.ip_addrs, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for VPortArg {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.ifname,
                    )?;
                }
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    self.cpid =
                        ::std::option::Option::Some(VPortArg_oneof_cpid::docker(is.read_string()?));
                }
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    self.cpid = ::std::option::Option::Some(VPortArg_oneof_cpid::container_pid(
                        is.read_int64()?,
                    ));
                }
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    self.cpid =
                        ::std::option::Option::Some(VPortArg_oneof_cpid::netns(is.read_string()?));
                }
                5 => {
                    ::protobuf::rt::read_repeated_int64_into(wire_type, is, &mut self.rxq_cpus)?;
                }
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_uint64()?;
                    self.tx_tci = tmp;
                }
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_uint64()?;
                    self.tx_outer_tci = tmp;
                }
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_bool()?;
                    self.loopback = tmp;
                }
                9 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.ip_addrs)?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.ifname.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.ifname);
        }
        for value in &self.rxq_cpus {
            my_size +=
                ::protobuf::rt::value_size(5, *value, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tx_tci != 0 {
            my_size +=
                ::protobuf::rt::value_size(6, self.tx_tci, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tx_outer_tci != 0 {
            my_size += ::protobuf::rt::value_size(
                7,
                self.tx_outer_tci,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.loopback != false {
            my_size += 2;
        }
        for value in &self.ip_addrs {
            my_size += ::protobuf::rt::string_size(9, &value);
        }
        if let ::std::option::Option::Some(ref v) = self.cpid {
            match v {
                &VPortArg_oneof_cpid::docker(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                }
                &VPortArg_oneof_cpid::container_pid(v) => {
                    my_size +=
                        ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
                }
                &VPortArg_oneof_cpid::netns(ref v) => {
                    my_size += ::protobuf::rt::string_size(4, &v);
                }
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if !self.ifname.is_empty() {
            os.write_string(1, &self.ifname)?;
        }
        for v in &self.rxq_cpus {
            os.write_int64(5, *v)?;
        }
        if self.tx_tci != 0 {
            os.write_uint64(6, self.tx_tci)?;
        }
        if self.tx_outer_tci != 0 {
            os.write_uint64(7, self.tx_outer_tci)?;
        }
        if self.loopback != false {
            os.write_bool(8, self.loopback)?;
        }
        for v in &self.ip_addrs {
            os.write_string(9, &v)?;
        }
        if let ::std::option::Option::Some(ref v) = self.cpid {
            match v {
                &VPortArg_oneof_cpid::docker(ref v) => {
                    os.write_string(2, v)?;
                }
                &VPortArg_oneof_cpid::container_pid(v) => {
                    os.write_int64(3, v)?;
                }
                &VPortArg_oneof_cpid::netns(ref v) => {
                    os.write_string(4, v)?;
                }
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VPortArg {
        VPortArg::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeString,
            >(
                "ifname",
                |m: &VPortArg| &m.ifname,
                |m: &mut VPortArg| &mut m.ifname,
            ));
            fields.push(
                ::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                    "docker",
                    VPortArg::has_docker,
                    VPortArg::get_docker,
                ),
            );
            fields.push(
                ::protobuf::reflect::accessor::make_singular_i64_accessor::<_>(
                    "container_pid",
                    VPortArg::has_container_pid,
                    VPortArg::get_container_pid,
                ),
            );
            fields.push(
                ::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                    "netns",
                    VPortArg::has_netns,
                    VPortArg::get_netns,
                ),
            );
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<
                _,
                ::protobuf::types::ProtobufTypeInt64,
            >(
                "rxq_cpus",
                |m: &VPortArg| &m.rxq_cpus,
                |m: &mut VPortArg| &mut m.rxq_cpus,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint64,
            >(
                "tx_tci",
                |m: &VPortArg| &m.tx_tci,
                |m: &mut VPortArg| &mut m.tx_tci,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeUint64,
            >(
                "tx_outer_tci",
                |m: &VPortArg| &m.tx_outer_tci,
                |m: &mut VPortArg| &mut m.tx_outer_tci,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeBool,
            >(
                "loopback",
                |m: &VPortArg| &m.loopback,
                |m: &mut VPortArg| &mut m.loopback,
            ));
            fields.push(
                ::protobuf::reflect::accessor::make_repeated_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "ip_addrs",
                    |m: &VPortArg| &m.ip_addrs,
                    |m: &mut VPortArg| &mut m.ip_addrs,
                ),
            );
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<VPortArg>(
                "VPortArg",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static VPortArg {
        static instance: ::protobuf::rt::LazyV2<VPortArg> = ::protobuf::rt::LazyV2::INIT;
        instance.get(VPortArg::new)
    }
}

impl ::protobuf::Clear for VPortArg {
    fn clear(&mut self) {
        self.ifname.clear();
        self.cpid = ::std::option::Option::None;
        self.cpid = ::std::option::Option::None;
        self.cpid = ::std::option::Option::None;
        self.rxq_cpus.clear();
        self.tx_tci = 0;
        self.tx_outer_tci = 0;
        self.loopback = false;
        self.ip_addrs.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VPortArg {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VPortArg {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14ports/port_msg.proto\x12\x07bess.pb\"\x1f\n\x0bPCAPPortArg\x12\x10\
    \n\x03dev\x18\x01\x20\x01(\tR\x03dev\"\x8e\x02\n\nPMDPortArg\x12\x1a\n\
    \x08loopback\x18\x01\x20\x01(\x08R\x08loopback\x12\x19\n\x07port_id\x18\
    \x02\x20\x01(\x04H\0R\x06portId\x12\x12\n\x03pci\x18\x03\x20\x01(\tH\0R\
    \x03pci\x12\x14\n\x04vdev\x18\x04\x20\x01(\tH\0R\x04vdev\x121\n\x15vlan_\
    offload_rx_strip\x18\x05\x20\x01(\x08R\x12vlanOffloadRxStrip\x123\n\x16v\
    lan_offload_rx_filter\x18\x06\x20\x01(\x08R\x13vlanOffloadRxFilter\x12/\
    \n\x14vlan_offload_rx_qinq\x18\x07\x20\x01(\x08R\x11vlanOffloadRxQinqB\
    \x06\n\x04port\"}\n\x11UnixSocketPortArg\x12\x12\n\x04path\x18\x01\x20\
    \x01(\tR\x04path\x12+\n\x12min_rx_interval_ns\x18\x02\x20\x01(\x03R\x0fm\
    inRxIntervalNs\x12'\n\x0fconfirm_connect\x18\x03\x20\x01(\x08R\x0econfir\
    mConnect\"\x8e\x02\n\x08VPortArg\x12\x16\n\x06ifname\x18\x01\x20\x01(\tR\
    \x06ifname\x12\x18\n\x06docker\x18\x02\x20\x01(\tH\0R\x06docker\x12%\n\r\
    container_pid\x18\x03\x20\x01(\x03H\0R\x0ccontainerPid\x12\x16\n\x05netn\
    s\x18\x04\x20\x01(\tH\0R\x05netns\x12\x19\n\x08rxq_cpus\x18\x05\x20\x03(\
    \x03R\x07rxqCpus\x12\x15\n\x06tx_tci\x18\x06\x20\x01(\x04R\x05txTci\x12\
    \x20\n\x0ctx_outer_tci\x18\x07\x20\x01(\x04R\ntxOuterTci\x12\x1a\n\x08lo\
    opback\x18\x08\x20\x01(\x08R\x08loopback\x12\x19\n\x08ip_addrs\x18\t\x20\
    \x03(\tR\x07ipAddrsB\x06\n\x04cpidb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<
    ::protobuf::descriptor::FileDescriptorProto,
> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| parse_descriptor_proto())
}
